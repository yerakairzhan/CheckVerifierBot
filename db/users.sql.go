// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const approveCheck = `-- name: ApproveCheck :exec
update users set purchased = TRUE where user_id = $1
`

func (q *Queries) ApproveCheck(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, approveCheck, userID)
	return err
}

const changeLanguage = `-- name: ChangeLanguage :exec
update users set language_code = $2 where user_id = $1
`

type ChangeLanguageParams struct {
	UserID       string `json:"user_id"`
	LanguageCode string `json:"language_code"`
}

func (q *Queries) ChangeLanguage(ctx context.Context, arg ChangeLanguageParams) error {
	_, err := q.db.ExecContext(ctx, changeLanguage, arg.UserID, arg.LanguageCode)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, username)
VALUES ($1, $2)
    ON CONFLICT (user_id, username)
DO UPDATE SET username = EXCLUDED.username
`

type CreateUserParams struct {
	UserID   string `json:"user_id"`
	Username string `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.UserID, arg.Username)
	return err
}

const getLanguage = `-- name: GetLanguage :one
SELECT COALESCE(language_code, 'en') AS language_code FROM users WHERE user_id = $1
`

func (q *Queries) GetLanguage(ctx context.Context, userID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getLanguage, userID)
	var language_code string
	err := row.Scan(&language_code)
	return language_code, err
}
